# 定期检查更新（暂时无效）
sys.check_update = on

# 发送开关机时间信息，帮你以图形化的形式展现你每天的开关机时间数据
# 有利于你更了解自己使用电脑的习惯
# （暂时无效）
sys.send_power_data = off

# 发送运行错误的信息，帮助改善软件
# （暂时无效）
sys.send_error_data = off

# 开机启动 5 分钟后开始计划任务
# 刚开机很多程序需要启动，此项设置可以减轻系统刚启动时的负担
sys.start_schedule_after_minute = 5


# 记录 crontab 的运行日志的文件
# 文件路径是相对此项目的根目录来设置的，你也可以使用绝对对路径（下面的类同）
file.log = log/crontab.log

# 记录 crontab 的错误日志的文件
file.error = log/crontab.err

# 计划任务设置文件，可以指定多个，用";"隔开
file.schedule = conf/schedule.conf;


# 各类脚本文件所放的地方，可以指定多个，用";"隔开
# 脚本不会递归去遍历的，所以你可以在这些文件夹下面新建一些文件
# 夹用来存在数据或其它一些被你自己调用的脚本
file.scripts = scripts;

# 对于 schedule 文件中的任务，可以通过一些简写方式来运行指定命令
# 如果对于 scripts 文件夹中有个 empty_files.js 的文件，如果你要在
# schedule文件中运用这个文件命令去每隔一天清空 file1、file2两个
# 文件，那么，你可以这样写：
# 		* * */2 * * empty_files.js file1 file2
#
# 如果没有下面的配置，你需要这样写：
# 		* * */2 * * node /path/to/empty_files.js file1 file2
#
# 显然，用上面那种写法高效多了
# 另外，除了指定脚本扩展的方式，还可以为某个命令指定一个别名，如：
# 		my_new_cmd 	= node path/to/somefile -flag
#	然后就可以在 schedule 中这样配置
# 		* * */2 * * my_new_cmd [argument]
#
# 缺点：多个 scripts 文件夹中不能包含同名文件，否则可能不会执行到你想要的文件
#
# $1 表示 scripts 文件夹中的对应文件的绝对路径
script.js 	= node $1
script.php  = php -f $1
script.py 	= python $1
